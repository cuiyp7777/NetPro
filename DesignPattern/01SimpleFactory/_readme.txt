简单工厂模式：

定义一个Factory类(只需要一个)，可以根据参数的不同返回不同类的实例；
被创建的实例通常有共同的父类。
实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类实例；

#意义
Product：抽象产品类，将具体产品类公共的代码进行抽象和提取后封装在一个抽象产品类中。
ConcreteProduct：具体产品类，将需要创建的各种不同产品对象的相关代码封装到具体产品类中；
Factory：工厂类，提供一个工厂类用于创建各种产品
Client：客户端类，只需调用工厂类的工厂方法并传入相应的参数即可得到一个产品对象。

#优点：
1、实现创建和使用分离；
2、client无需知道所创建的concreteProduct（具体产品）类名，只需要知道ConcreteProuct所对应的参数

#缺点：
1、Factory类集中所有ConcreteProduct的创建逻辑，职责过重；添加新的Product，需要修改Factory的逻辑；
2、


实例：
01Peration：运算操作
02IPayment：银行支付接口